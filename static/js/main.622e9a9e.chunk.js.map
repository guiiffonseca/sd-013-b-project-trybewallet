{"version":3,"sources":["LogoTest.png","headerLogo.jpg","reducers/user.js","actions/index.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.js","Components/AddExpenseButton.jsx","Components/ExpensesTable.jsx","Components/Currency.jsx","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","INITIAL_STATE","email","userReducer","state","action","type","user","currencies","expenses","walletReducer","wallet","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Login","props","password","disabled","handleChange","bind","handleSubmit","validForm","sendLogin","this","length","includes","split","every","error","setState","history","UserLoginAction","push","target","name","value","event","preventDefault","className","src","LoginLogo","alt","onSubmit","data-testid","onChange","onKeyUp","placeholder","onClick","Component","connect","dispatch","UserLogin","AddExpenseButton","addExpense","ExpensesTable","deleteExpense","id","expense","deleteExpenses","filter","exp","exchangeRates","currency","description","tag","method","Object","values","correctCurrency","curr","code","calc","Number","ask","correctExpense","parseInt","cambio","exc","USD","CAD","EUR","GBP","ARS","BTC","LTC","JPY","CHF","AUD","CNY","ILS","ETH","XRP","parseFloat","toFixed","deleteExpenseAction","Currency","AddExpenseHelper","chang","exchangeRatesRequisition","renderAddExpenses","renderExpenseHeader","fetch","response","json","data","USDT","walletAction","htmlFor","map","key","walletExpenses","Wallet","createLogin","handleExpenses","toMatch","indexOf","toUpperCase","substr","expensesArray","reduce","a","b","headerLogo","React","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.622e9a9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LogoTest.259e22ce.png\";","module.exports = __webpack_public_path__ + \"static/media/headerLogo.6899dee4.jpg\";","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction userReducer(state = INITIAL_STATE, action) {\n  const { type, user } = action;\n  switch (type) {\n  case LOGIN:\n    return {\n      ...state,\n      email: user.email,\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default userReducer;\n","// Coloque aqui suas actions\nexport const LOGIN = 'LOGIN';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\n\nexport function UserLogin(email) {\n  return ({\n    type: LOGIN,\n    user: {\n      email,\n    },\n  });\n}\n\nexport function walletExpenses(expenses) {\n  return ({\n    type: ADD_EXPENSE,\n    wallet: {\n      expenses,\n    },\n  });\n}\n\n// stackOverflow https://stackoverflow.com/questions/37777525/delete-an-item-from-redux-state/37777800\nexport function deleteExpenseAction(expenses) {\n  return ({\n    type: DELETE_EXPENSE,\n    wallet: {\n      expenses,\n    },\n  });\n}\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { ADD_EXPENSE, DELETE_EXPENSE } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nfunction walletReducer(state = INITIAL_STATE, action) {\n  const { type, wallet/* despesas */ } = action;\n  switch (type) {\n  case ADD_EXPENSE:\n    return {\n      ...state,\n      currencies: wallet.currencies,\n      expenses: [...state.expenses, wallet.expenses],\n    };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      currencies: wallet.currencies,\n      expenses: wallet.expenses,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './user';\nimport walletReducer from './wallet';\n// import wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  wallet: walletReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport '../Styles/Login.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { UserLogin } from '../actions/index';\nimport LoginLogo from '../LogoTest.png';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      disabled: true,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validForm = this.validForm.bind(this);\n    this.sendLogin = this.sendLogin.bind(this);\n  }\n\n  validForm() {\n    const { password, email } = this.state;\n    const passwordLength = 6;\n\n    const errorCases = [\n      password.length < passwordLength,\n      !email.includes('@'),\n      email.split('@').length > 2,\n      !email.includes('.com'),\n    ];\n\n    const filledCorrect = errorCases.every((error) => error === false);\n\n    if (filledCorrect) {\n      this.setState({ disabled: false });\n    } else {\n      this.setState({ disabled: true });\n    }\n  }\n\n  sendLogin() {\n    const { email } = this.state;\n\n    const { history, UserLoginAction } = this.props;\n\n    UserLoginAction(email);\n\n    history.push('/carteira');\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  render() {\n    const { email, password, disabled } = this.state;\n    return (\n      <div className=\"login-screen\">\n        <img src={ LoginLogo } alt=\"Login logo\" className=\"login-logo\" />\n        <div className=\"login-container\">\n          <form onSubmit={ this.handleSubmit }>\n            <input\n              data-testid=\"email-input\"\n              className=\"login-input\"\n              type=\"email\"\n              name=\"email\"\n              value={ email }\n              onChange={ this.handleChange }\n              onKeyUp={ this.validForm }\n              placeholder=\"Email\"\n            />\n            <input\n              data-testid=\"password-input\"\n              className=\"login-input\"\n              type=\"password\"\n              name=\"password\"\n              value={ password }\n              onChange={ this.handleChange }\n              onKeyUp={ this.validForm }\n              placeholder=\"Password\"\n            />\n            <button\n              type=\"submit\"\n              className=\"login-button\"\n              disabled={ disabled }\n              onClick={ this.sendLogin }\n            >\n              Entrar\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  UserLoginAction: (email) => dispatch(UserLogin(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  UserLoginAction: PropTypes.func.isRequired,\n  history: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class AddExpenseButton extends Component {\n  render() {\n    const { addExpense } = this.props;\n    return (\n      <div>\n        <button className=\"add-button\" type=\"submit\" onClick={ addExpense }>\n          adicionar despesa\n        </button>\n      </div>\n    );\n  }\n}\n\nAddExpenseButton.propTypes = {\n  addExpense: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../Styles/ExpensesTable.css';\nimport { connect } from 'react-redux';\nimport { deleteExpenseAction } from '../actions';\n\nclass ExpensesTable extends Component {\n  constructor() {\n    super();\n    this.deleteExpense = this.deleteExpense.bind(this);\n  }\n\n  deleteExpense() {\n    const { expense: { id } } = this.props;\n    const { deleteExpenses, expenses } = this.props;\n    // filtro\n    const expensesArray = expenses;\n    const arrayFiltered = expensesArray.filter((exp) => exp.id !== id);\n    deleteExpenses(arrayFiltered);\n  }\n\n  render() {\n    const { expense: { exchangeRates,\n      currency, description, tag, method, value } } = this.props;\n    const changes = {\n      USD: 'Dólar Comercial',\n      CAD: 'Dólar Canadense',\n      EUR: 'Euro',\n      GBP: 'Libra Esterlina',\n      ARS: 'Peso',\n      BTC: 'Bitcoin',\n      LTC: 'Litecoin',\n      JPY: 'Yen',\n      CHF: 'Swiss',\n      AUD: 'Dólar Australiano',\n      CNY: 'Yuan',\n      ILS: 'Israeli New Shekew',\n      ETH: 'Ethereum',\n      XRP: 'Riple',\n    };\n    const currencies = Object.values(exchangeRates);\n    const correctCurrency = currencies.filter((curr) => curr.code === currency);\n    const calc = Number(value) * correctCurrency[0].ask;\n    const precision = 100;\n    const correctExpense = parseInt(calc * precision, 10) / precision;\n    const cambio = currencies.filter((exc) => exc.code === currency)[0].ask;\n    return (\n      <tr>\n        <td>{description}</td>\n        <td>{tag }</td>\n        <td>{method }</td>\n        <td>{`${parseInt(value, 10)}`}</td>\n        <td>{changes[currency]}</td>\n        <td>{parseFloat(cambio).toFixed(2)}</td>\n        <td>{correctExpense}</td>\n        <td>Real</td>\n        <td>\n          <button\n            type=\"button\"\n            data-testid=\"delete-btn\"\n            className=\"delete-button\"\n            onClick={ this.deleteExpense }\n          >\n            Delete\n          </button>\n        </td>\n      </tr>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpenses: (expenses) => dispatch(\n    deleteExpenseAction(expenses),\n  ),\n});\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesTable);\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.objectOf(PropTypes.string).isRequired,\n  expense: PropTypes.objectOf(PropTypes.string).isRequired,\n  deleteExpenses: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { walletExpenses } from '../actions/index';\nimport AddExpenseButton from './AddExpenseButton';\nimport ExpensesTable from './ExpensesTable';\nimport '../Styles/ExpensesTable.css';\nimport '../Styles/Currency.css';\n\nclass Currency extends Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: 0,\n      description: 'none',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      exchangeRates: {},\n    };\n    this.AddExpenseHelper = this.AddExpenseHelper.bind(this);\n    this.chang = this.chang.bind(this);\n    this.addExpense = this.addExpense.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.exchangeRatesRequisition = this.exchangeRatesRequisition.bind(this);\n    this.renderAddExpenses = this.renderAddExpenses.bind(this);\n    this.renderExpenseHeader = this.renderExpenseHeader.bind(this);\n  }\n\n  componentDidMount() {\n    this.exchangeRatesRequisition();\n  }\n\n  chang({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async exchangeRatesRequisition() {\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const data = await response.json();\n    delete data.USDT;\n    this.setState({\n      exchangeRates: data,\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  AddExpenseHelper() {\n    const { walletAction } = this.props;\n    const { value,\n      currency, id, description, method, tag, exchangeRates } = this.state;\n    walletAction({ id,\n      description,\n      method,\n      tag,\n      value,\n      currency,\n      exchangeRates,\n    });\n  }\n\n  async addExpense() {\n    await this.exchangeRatesRequisition();\n    const { walletAction } = this.props;\n    const { value, currency, exchangeRates, id } = this.state;\n\n    const { description, method, tag } = this.state;\n    walletAction({ id, description, method, tag, value, currency, exchangeRates });\n\n    this.setState(({\n      id: id + 1,\n    }));\n  }\n\n  renderAddExpenses() {\n    const { value, description, currency, method, tag, exchangeRates } = this.state;\n    const { chang, addExpense, handleSubmit } = this;\n    return (\n      <form className=\"wallet-container\" onSubmit={ handleSubmit }>\n        <label htmlFor=\"v\">\n          Valor\n          <input type=\"number\" name=\"value\" id=\"v\" onChange={ chang } value={ value } />\n        </label>\n        <label htmlFor=\"d\">\n          Descrição\n          <input\n            type=\"text\"\n            name=\"description\"\n            id=\"d\"\n            onChange={ this.chang }\n            value={ description }\n          />\n        </label>\n        <label htmlFor=\"c\">\n          Moeda\n          <select name=\"currency\" id=\"c\" onChange={ this.chang } value={ currency }>\n            {Object.values(exchangeRates).map(({ code, name }) => (\n              <option key={ name }>\n                {code}\n              </option>))}\n          </select>\n        </label>\n        <label htmlFor=\"pt\">\n          Método de pagamento\n          <select name=\"method\" id=\"pt\" onChange={ this.chang } value={ method }>\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"ps\">\n          Tag\n          <select name=\"tag\" id=\"ps\" onChange={ this.chang } value={ tag }>\n            <option value=\"Alimentacao\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Trasporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n        <AddExpenseButton addExpense={ addExpense } />\n      </form>\n    );\n  }\n\n  renderExpenseHeader() {\n    return (\n      <tr>\n        <th>Descrição</th>\n        <th>Tag</th>\n        <th>Método de pagamento</th>\n        <th>Valor</th>\n        <th>Moeda</th>\n        <th>Câmbio utilizado</th>\n        <th>Valor convertido</th>\n        <th>Moeda de conversão</th>\n        <th>Excluir</th>\n      </tr>\n    );\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <div>\n        {this.renderAddExpenses()}\n        <table className=\"expenses-table\">\n          { this.renderExpenseHeader() }\n          { expenses.map((expense) => (<ExpensesTable\n            expense={ expense }\n            key={ expense.id }\n          />))}\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  walletAction: (expenses) => dispatch(walletExpenses(expenses)),\n});\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Currency);\n\nCurrency.propTypes = {\n  expenses: PropTypes.objectOf(PropTypes.string).isRequired,\n  walletAction: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../Styles/Wallet.css';\nimport Currency from '../Components/Currency';\nimport headerLogo from '../headerLogo.jpg';\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createLogin = this.createLogin.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleExpenses = this.handleExpenses.bind(this);\n  }\n\n  createLogin() {\n    const { email } = this.props;\n    const toMatch = email.indexOf('@');\n    const user = `_${email[0].toUpperCase()}${email.substr(1, toMatch - 1)}_`;\n    return user;\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleExpenses() {\n    const { expenses } = this.props;\n    const precision = 100;\n\n    const expensesArray = expenses.map(({ exchangeRates,\n      currency, value }) => {\n      const currencies = Object.values(exchangeRates);\n      const correctCurrency = currencies.filter((curr) => curr.code === currency);\n      const calc = Number(value) * correctCurrency[0].ask;\n      const correctExpense = parseInt(calc * precision, 10) / precision;\n      return correctExpense;\n    });\n    if (expenses.length) {\n      const totalExpenses = parseInt(expensesArray\n        .reduce((a, b) => a + b) * precision, 10) / precision;\n      return totalExpenses;\n    }\n    return 0;\n  }\n\n  render() {\n    this.handleExpenses();\n    const { email } = this.props;\n    const toMatch = email.indexOf('@');\n    let user;\n    if (email) {\n      user = `_${email[0].toUpperCase()}${email.substr(1, toMatch - 1)}_`;\n    }\n    return (\n      <div className=\"wallet-style\">\n        <header className=\"header-container\">\n          <span id=\"user\">{ user }</span>\n          <img src={ headerLogo } alt=\"header Logo\" />\n          <span id=\"user-email\" data-testid=\"email-field\">{`Email: ${email}`}</span>\n          <div className=\"expenses-container\">\n            <span data-testid=\"total-field\" id=\"total-field\">\n              {`Despesa Total: R$ ${this.handleExpenses()}` }\n            </span>\n            <span data-testid=\"header-currency-field\" id=\"currency\"> BRL</span>\n          </div>\n        </header>\n        <Currency />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(Wallet);\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  // Initing project!\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}